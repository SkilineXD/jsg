#ifdef GL_ES
precision highp float;
precision highp int;
#endif

$IF_POSITIVE_POS_LIGHT_QTD
#define MAX_POS_LIGHTS $JSG_POSITIONAL_LIGTH_QTD

$IF_POSITIVE_DIR_LIGHT_QTD
#define MAX_DIR_LIGHTS  $JSG_DIRECTIONAL_LIGTH_QTD

uniform int uUseTextureKa;
uniform int uUseTextureKd;
uniform sampler2D uSamplerKa;
uniform sampler2D uSamplerKd;
uniform vec4 uMaterialColor;
uniform vec4 uAmbientColor;
uniform int uPosLights;
uniform int uDirLights;
uniform float uShininess;
uniform vec4 uSpecularColor;
uniform vec4 uAmbientLight;
uniform float uCutOff;
#ifdef MAX_POS_LIGHTS
uniform vec3 uLightPosition[MAX_POS_LIGHTS];
uniform	vec4 uPLightColor[MAX_POS_LIGHTS];
uniform vec4 uLightSpecular[MAX_POS_LIGHTS];
uniform vec3 uLightPositionDir[MAX_POS_LIGHTS];
uniform int shaderType;
varying vec3 eyeVec;
varying vec3 vNormal;
varying vec3 lightdir[MAX_POS_LIGHTS];
varying vec4 vColor;
varying vec2 vTextureCoords;
#endif

#ifdef MAX_DIR_LIGHTS
uniform vec3 uLightDirection[MAX_DIR_LIGHTS];
uniform	vec4 uDLightColor[MAX_DIR_LIGHTS];
uniform	vec4 uDLightSpecular[MAX_DIR_LIGHTS];
#endif

void phong(void){
    vec4 ambientMaterial = uAmbientColor;
    vec4 diffuseMaterial = uMaterialColor;
    if (uUseTextureKa == 1) {
        ambientMaterial = ambientMaterial * texture2D(uSamplerKa, vTextureCoords);
    }
    if (uUseTextureKd == 1) {
        diffuseMaterial = diffuseMaterial  * texture2D(uSamplerKd, vTextureCoords);
    }
    vec3 E = normalize(eyeVec);
    vec4 Ia = uAmbientLight * ambientMaterial;
    vec4 fColor = vec4(0.0, 0.0, 0.0, 1.0);
    #ifdef MAX_POS_LIGHTS
    for(int i = 0; i < MAX_POS_LIGHTS; i++){
        vec3 N = normalize(vNormal-uLightPositionDir[i]);
        vec3 L = normalize(lightdir[i]);
        vec3 R = reflect(L, N);
        float lt = dot(N, -L);
        float specular = pow(max(dot(R,E), 0.0), uShininess);
        float f = 40.0001; 
        vec4 Id = diffuseMaterial * uPLightColor[i] * pow(lt, f * uCutOff);
        vec4 Is = uSpecularColor * uLightSpecular[i] * specular;
        fColor +=  Id + Is;
    }
	#endif

	#ifdef MAX_DIR_LIGHTS
    vec3 N = normalize(vNormal);
    for(int i = 0; i < MAX_DIR_LIGHTS; i++){
        vec3 L = normalize(uLightDirection[i]);
        vec3 R = reflect(L, N);
        float lt = dot(N, -L);
        float specular = pow(max(dot(R,E), 0.0), uShininess);
        float f = 40.0001;
        vec4 Id = diffuseMaterial * uPLightColor[i] * pow(lt, f * uCutOff);
        vec4 Is = uSpecularColor * uDLightSpecular[i] * specular;
        fColor += Id + Is;
    }
	#endif
    fColor += Ia;
    fColor[3] = uMaterialColor[3];
    gl_FragColor = fColor;
}

void goroud(void){
    vec4 color = vColor;
    if (uUseTextureKa == 1) {
        color = color * texture2D(uSamplerKa, vTextureCoords);
    } else if (uUseTextureKd == 1) {
        color = color  * texture2D(uSamplerKd, vTextureCoords); 
    }
    gl_FragColor = color;
}

void shadowMapping(void){
    gl_FragColor = vColor;
}

void flatMode() {
    gl_FragColor = vColor;
}

void main(void) {
    if (shaderType == 1) {
        goroud();
    } else if (shaderType == 2) {
        phong();
    } else if (shaderType == 3) {
        shadowMapping();
    } else {
        flatMode();
    }
}
